const float MIN_DIST = 0.01;
const float MAX_DIST = 50.0;
const int OCTAVES = 8;


float noise(in vec2 uv)
{
    return sin(uv.x)+cos(uv.y);
}


float height(vec3 p)
{
    vec2 uv = p.xz;
    uv /= 1.5;
    float value = 0.;
    float amplitude = 1.;
    float freq = 0.8;
    
    for (int i = 0; i < OCTAVES; i++)
    {
        value = max(value,value+(.25-abs(noise(uv * freq)-.3) * amplitude));
        amplitude *= .4;
        freq *= 2.;
        
    }
    
    return value*2.0-2.0;
}


mat3 camera_matrix(vec3 cameraPos, vec3 lookAtPoint) {
    vec3 look = lookAtPoint - cameraPos;
    vec3 up = vec3 (0.f,1.f,0.f);
    
    vec3 w = normalize(look);
    vec3 v = normalize(up - dot(up,w)*w);
    vec3 u = cross(v, w);
	
	return mat3(u,v,w);
}

float rayMarch(in vec3 ro, in vec3 rd)
{
    float t = MIN_DIST;
	for( int i = 0; i < 300; i++ )
	{
        vec3 pos = ro + t * rd;
		float h = pos.y - height(pos);
		if( abs(h) < (0.0015 * t) || t > MAX_DIST ) 
            break;
		t += 0.2 * h;
	}

	return t;
}

vec3 getNormal(vec3 p, float t)
{
    vec3 eps=vec3(.001 * t, .0, .0);
    vec3 n=vec3(height(p - eps.xyy) - height(p + eps.xyy),
                2. * eps.x,
                height(p - eps.yyx) - height(p + eps.yyx));
  
    return normalize(n);
}



vec3 mountain(vec3 p, vec3 normal, vec3 L, vec3 V, vec3 rd)
{

//water
if(p.y < 0.4){
    return vec3(0.1, 0.4, 0.5);
}else if(p.y < 0.45){
    return vec3(0.1, 0.45, 0.55);
}else if(p.y < 0.5){
    return vec3(0.1, 0.5, 0.55);

}
    
    //diffuse
    float N_L = max(dot(normal, L), 0.f);
    
    vec3 col = vec3(0,0,0);

    
    //toon shader
    float intensity = N_L;
    if(N_L > 0.9){
    col = vec3(1.0, 0.5, 0.5);
    }else if(N_L > 0.5){
    col = vec3(0.6, 0.3, 0.3);
    }else if(N_L > 0.25){
    col = vec3(0.4, 0.2, 0.2);
    }else if(N_L > 0.15){
    col = vec3(0.3, 0.2, 0.1);
    }else{
    col = vec3(0.1, 0.1, 0.1);
    }
    
    
   	return col;
}

vec3 sunset_sky(vec3 rd, vec3 lightDir){
    vec3 col = vec3(0.99,0.35,0.35);
    col = mix(0.85*vec3(0.9,0.75,0.95),col, pow(1.0-max(rd.y,0.0), 10.0 ) );
    return col;
}

vec3 sun(vec3 rd, vec3 lightDir){
   float sundot = clamp(dot(rd, lightDir), 0.0, 1.0);
    vec3 col = 0.2*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );
	col += 0.3*vec3(1.0,0.8,0.6)*pow( sundot,256.0 );
	col += 0.5*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );

    return col;
}

vec3 horizon(vec3 col, vec3 rd){
    vec3 new_col = mix(col, 0.7*vec3(0.75,0.65,0.8), pow( 1.0-max(rd.y,0.0), 8.0 ) );
    return new_col;

}

vec3 fog(vec3 col, float t){
    float coef = 1.0-exp(-pow(30. * t/250.,1.5) );
    vec3 fog = 0.7*vec3(0.75,0.65,0.8);
    vec3 newcol = mix( col, fog, coef);
    return newcol;

}

void solveEquation(in mat4 coeCalculate, in vec4 pos, out vec4 coe) {
    coe = coeCalculate * pos;
}

// Calculate the current camera position
void animateCamera(in float t, out vec3 cameraPos) {
    t = mod(t, 10.0);
    mat4 coeCalculate = mat4(-1.0,  3.0, -3.0,  1.0,
                              3.0, -6.0,  3.0,  0.0,
                             -3.0,  3.0,  0.0,  0.0,
                              1.0,  0.0,  0.0,  0.0);
    // The position of the ith point is actually (posX[i], posY[i], posZ[i])
    vec4 posX;  // X dimensions of 4 points
    vec4 posY;
    vec4 posZ;
    
    // Different routines based on time
    if(t < 5.0) {
        t /= 5.0;
        posX = vec4( 0.0, 10.0, -10.0,  0.0);
        posY = vec4( 3.0,  2.0,   3.0,  2.0);
        posZ = vec4( 0.0,  5.0,  10.0, 15.0);
    } else {
        t = (t - 5.0) / 5.0;
        posX = vec4( 0.0, 10.0, -10.0,  0.0);
        posY = vec4( 2.0,  3.0,   3.0,  3.0);
        posZ = vec4(15.0, 10.0,   5.0,  0.0);
    }
    
    vec4 coeX;
    vec4 coeY;
    vec4 coeZ;
    solveEquation(coeCalculate, posX, coeX);
    solveEquation(coeCalculate, posY, coeY);
    solveEquation(coeCalculate, posZ, coeZ);
    
    // Get the coefficients for BÃ©zier curve
    vec3 a = vec3(coeX[0], coeY[0], coeZ[0]);
    vec3 b = vec3(coeX[1], coeY[1], coeZ[1]);
    vec3 c = vec3(coeX[2], coeY[2], coeZ[2]);
    vec3 d = vec3(coeX[3], coeY[3], coeZ[3]);
    
    // Calculate the current position
    cameraPos = a * t * t * t + b * t * t + c * t + d;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;
    vec3 lightDir = normalize(vec3(-1., .2, -1.));
    vec3 sunpos = normalize(vec3(-1., 0.8 * abs(sin(0.1*iTime)) - 0.4, -1.));
    
    //camera data
    //vec3 cameraStep = vec3(lightDir.x, 0., lightDir.z) * iTime;
    //vec3 cameraPos = vec3(5., 2., 5.) + cameraStep;
    //vec3 lookAtPoint = vec3(1., 1.5, 4.) + cameraStep;
    vec3 cameraPos = vec3(5., 2., 5.);
    vec3 lookAtPoint = vec3(-1., 2, 4.);
    
    animateCamera(0.3*iTime, cameraPos);
    
    mat3 view_matrix = camera_matrix(cameraPos, lookAtPoint);
    
    //ray
    vec3 ro = cameraPos;
    vec3 rd = normalize(view_matrix * vec3(uv.xy, 1.0));
    
    //ray march
    float t = rayMarch(ro, rd);
    
    vec3 col = vec3(0.f);
   
    if(t < MAX_DIST){
    //if we hit a mountain
        vec3 p = ro + rd*t;
        vec3 normal = getNormal(p,t);
        vec3 viewDir = normalize(ro - p);
        col = mountain(p, normal, lightDir, viewDir, rd);
        col = fog(col, t);
       
      

    }else{
    
    col += sunset_sky(rd, sunpos);
    col += sun(rd, sunpos);
    col = horizon(col, rd);

    
    
    
    }
        col = pow(clamp(col, 0., 1.), vec3(.45)); 

    fragColor = vec4(vec3(col), 1.0);

}
