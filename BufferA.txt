const ivec2 MEMORY_BOUNDARY = ivec2(4, 3);

const ivec2 POSITION = ivec2(0, 0);
const ivec2 UP = ivec2(0, 1);

const ivec2 LOOK = ivec2(0, 2);

const ivec2 MOUSEPOSITION = ivec2(1, 2);

const int KEY_LEFT  = 37;
const int KEY_UP    = 38;
const int KEY_RIGHT = 39;
const int KEY_DOWN  = 40;
const int KEY_BIND_FORWARD = KEY_UP;
const int KEY_BIND_BACKWARD = KEY_DOWN;
const int KEY_BIND_RIGHT = KEY_RIGHT;
const int KEY_BIND_LEFT = KEY_LEFT;

const float moveRate = 5.;

void update(out vec4 fragColor, vec2 fragCoord, ivec2 dataPosition, vec4 data) {
    if(int(fragCoord.x) == dataPosition.x && int(fragCoord.y) == dataPosition.y)
        fragColor = data;
}

vec4 load(ivec2 dataPosition) {
    return texelFetch(iChannel1, ivec2(dataPosition), 0);
}

vec3 keyboardInput(vec3 look, vec3 up) {
    vec3 move = vec3(0);
    look = normalize(look);
    up = normalize(up);
    vec3 left = normalize(cross(up, look));
    
    move += look * texelFetch(iChannel0, ivec2(KEY_BIND_FORWARD, 0), 0).x;
    move -= look * texelFetch(iChannel0, ivec2(KEY_BIND_BACKWARD, 0), 0).x;
    move += left * texelFetch(iChannel0, ivec2(KEY_BIND_LEFT, 0), 0).x;
    move -= left * texelFetch(iChannel0, ivec2(KEY_BIND_RIGHT, 0), 0).x;
    
    return move;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    if (any(greaterThan(ivec2(fragCoord), MEMORY_BOUNDARY))) return;
    
    
    if (iTime == 0.0 || iFrame == 0) {
        update(fragColor, fragCoord, POSITION, vec4(0., 2., -5., 0.));
        update(fragColor, fragCoord, UP, vec4(0.0, 1.0, 0.0, 0.0));
        update(fragColor, fragCoord, LOOK, vec4(0.0, 0.0, -1.0, 0.0));  // left (1, 0, 0)
        update(fragColor, fragCoord, MOUSEPOSITION, vec4(0.0));
        return;
    }
    
    vec3 position = load(POSITION).xyz;
    vec3 up = load(UP).xyz;
    vec3 look = load(LOOK).xyz;
    
    vec3 move = keyboardInput(look, up);
    
    position += move * iTimeDelta * moveRate;
        
    if(iMouse.w > 0.0) {
        update(fragColor, fragCoord, MOUSEPOSITION, vec4(abs(iMouse.zw), 1.0, 0.0));
    }
    
    if(iMouse.z > 0.0) {
        vec2 mousePosition = load(MOUSEPOSITION).xy;
        vec2 mouseMove = iMouse.xy - mousePosition;
        if(mouseMove.x != 0.0 && abs(mouseMove.x) < 10000.0) {
            mat3 rotateMatrix = rotate(mouseMove.x / 360., vec3(0, 1, 0));
            look = rotateMatrix * look;
            up = rotateMatrix * up;
        }
        if(mouseMove.y != 0.0 && abs(mouseMove.y) < 10000.0) {
            mat3 rotateMatrix = rotate(mouseMove.y / 360., cross(up, look));
            look = rotateMatrix * look;
            up = rotateMatrix * up;
        }
        update(fragColor, fragCoord, MOUSEPOSITION, vec4(iMouse.xy, 0.0, 0.0));
    }
    
    update(fragColor, fragCoord, POSITION, vec4(position, 1.0));
    update(fragColor, fragCoord, UP, vec4(up, 0.0));
    update(fragColor, fragCoord, LOOK, vec4(look, 0.0));
}
