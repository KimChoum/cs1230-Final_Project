//
// Inspired by blog post: http://tuxedolabs.blogspot.fr/2018/05/bokeh-depth-of-field-in-single-pass.html
// Original scene: https://www.shadertoy.com/view/MsG3Dz
//
// There is still lots of flickering, I'm guessing this is because of the original scene's lighting.
// Using PBR would probably fix the crazy specular values we get sometimes
// As a quick way to remove flickering, we can use AA
//


#define DISPLAY_GAMMA 1.8

#define GOLDEN_ANGLE 2.39996323
#define MAX_BLUR_SIZE 20.0

// Smaller = nicer blur, larger = faster
#define RAD_SCALE 0.5

#define uFar 10.0


float time;
float seed;
float rand() { return fract(sin(seed++)*43758.545); }

vec4 samp(vec2 p)
{
    p.y*=1280./720.;
    return texture(iChannel0,p/2.+.5)*1.05;
}

vec3 getBlurColor(vec2 t) {
    vec3 filterColor = vec3(0.8, 0.8, 1.0) / 6.0;
    vec2 centerPos = t;
    for(int n = 0; n < 2; ++n)
    {
        float factor = mix(1.0 / 22.0, 1.0 / 4.0, 1.0 - float(n)) * 0.4;

        ivec2 uo = ivec2(floor(centerPos / factor));
        for (int i = -1; i <= 1; ++i)
        {
            for(int j = -1; j <= 1; ++j)
            {
                vec2 u = vec2(uo) + vec2(i, ((uo.x + i) % 2 == 1 ? -j : j));
                seed = u.x * 881.0 + u.y * 927.0 + float(n) * 1801.0;
                for(int k = 0; k < 10; ++k)
                {
                    vec2 samplePos = (u + vec2(rand(), rand())) * factor;
                    vec2 offset = centerPos - samplePos;
                    vec3 sampleColor = samp(samplePos).rgb;
                    float alpha = dot(sampleColor, vec3(1.0 / 3.0));
                    float radius = mix(0.25, 0.99, pow(rand(), 4.0)) * factor;
                    float theta = rand() * acos(-1.0) * 2.0; // This angle is used for the 'stroke lines' in the circles.
                    float dist = length(offset);
                    offset *= mat2(cos(theta), sin(theta), -sin(theta), cos(theta));
                    if(rand() > -floor(time * 2.0) / 2.0 / 10.0)
                    {
                        // Shade in the circle, and an outline of the circle.
                        filterColor = mix(filterColor, sampleColor, mix(0.1, 0.4, rand()) * 3.0 * pow(alpha, 0.8) * mix(0.8, 1.0, cos(offset.x * 1200.0) * 0.5 + 0.5) * clamp((radius - dist) / mix(0.001, 0.004, rand()), 0.0, 1.0));
                        filterColor = mix(filterColor, sampleColor / 2.0, mix(0.14, 0.3, pow(rand(), 16.0)) / 4.0 * clamp(1.0 - abs(radius - dist) / 0.002, 0.0, 1.0));
                    }
                }
            }

        }
    }

    vec2 eps = vec2(1e-3, 0.0);
    centerPos += (valnoise(centerPos * 18.0) - 0.5) * 0.01;
    float colorCenter = dot(vec3(1.0 / 3.0), samp(centerPos).rgb);
    float colorX = dot(vec3(1.0 / 3.0), samp(centerPos + eps.xy).rgb);
    float colorY = dot(vec3(1.0 / 3.0), samp(centerPos + eps.yx * 1.8).rgb);

    filterColor *= vec3(mix(0.1, 1.0, 1.0 - clamp(max(abs(colorY - colorCenter), abs(colorX - colorCenter)) * 4.0, 0.0, 0.13)));

    // Final output.
    filterColor = (filterColor - 0.5) * 1.1 + 0.5;
    return filterColor;

}

float getBlurSize(float depth, float focusPoint, float focusScale)
{
	float coc = clamp((1.0 / focusPoint - 1.0 / depth)*focusScale, -1.0, 1.0);
    return abs(coc) * MAX_BLUR_SIZE;
}

vec3 depthOfField(vec2 texCoord, float focusPoint, float focusScale)
{
    vec4 Input = texture(iChannel0, texCoord).rgba;
    float centerDepth = Input.a * uFar;
    float centerSize = getBlurSize(centerDepth, focusPoint, focusScale);
    vec3 color = Input.rgb;
    float tot = 1.0;
    
    vec2 texelSize = 1.0 / iResolution.xy;

    float radius = RAD_SCALE;
    radius = 1.;
    for (float ang = 0.0; radius < MAX_BLUR_SIZE; ang += GOLDEN_ANGLE)
    {
        vec2 tc = texCoord + vec2(cos(ang), sin(ang)) * texelSize * radius;
        
        vec4 sampleInput = texture(iChannel0, tc).rgba;

        vec3 sampleColor = sampleInput.rgb;
        float sampleDepth = sampleInput.a * uFar;
        float sampleSize = getBlurSize(sampleDepth, focusPoint, focusScale);
        
        if (sampleDepth > centerDepth)
        {
        	sampleSize = clamp(sampleSize, 0.0, centerSize*2.0);
        }

        float m = smoothstep(radius-0.5, radius+0.5, sampleSize);
        color += mix(color/tot, sampleColor, m);
        tot += 1.0;
        radius += RAD_SCALE/radius;
    }
    
    return color /= tot;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
    
    vec4 color = texture(iChannel0, uv).rgba;
    
    float focusPoint = 10.0;
    //float focusScale = (0.5 + sin(iTime) * 0.5) * 30.0;
    float focusScale = (0.5 * 0.5) * 30.0;
    //color.rgb = depthOfField(uv, focusPoint, focusScale);
    
    //color.rgb = depthOfField(uv, focusPoint, focusScale);

    //tone mapping
    //color.rgb = vec3(1.7, 1.8, 1.9) * color.rgb / (1.0 + color.rgb);
    
    //inverse gamma correction
    
    bool post = true;
    
    if(post){
        time=iTime;
        vec2 t=(uv*2.-1.)*.55;
        t.x*=iResolution.x/iResolution.y;
        
        vec3 c = getBlurColor(t);
        fragColor.rgb=sqrt(c*mix(.9,1.,valnoise(t.xy*400.)))*1.08;}
    else{
    fragColor = vec4(pow(color.rgb, vec3(1.0 / DISPLAY_GAMMA)), 1.0);}
    
    // Debug depth
    //fragColor.rgb = vec3(color.a)*0.015;
}
